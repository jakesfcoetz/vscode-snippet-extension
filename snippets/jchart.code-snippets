{
  //=================================================================
  "jchart Bar": {
    "prefix": "jchart",
    "body": [
      "// ================================================================",
      "// ========== Bar =================================================",
      "// ================================================================",
      "//--- Add to HTML",
      "// <div echarts [options]=\"chartoptions_Bar\" [merge]=\"mergeOptions_Bar\" class=\"chart\"></div>",
      "",
      "mergeOptions_Bar: any; //--- Object used to dynamically update chart options",
      "loading_Bar: boolean = false; //--- Display loading graphic on chart",
      "",
      "//--- Add specific settings to series options",
      "private seriesSpecificOptions_bar = {",
      "  type: 'bar',",
      "  barGap: '10%',",
      "  label: {",
      "    show: true,",
      "    position: 'inside',",
      "    fontSize: 20,",
      "    color: 'rgba(15, 73, 115, 0.85)',",
      "  },",
      "  emphasis: {",
      "    focus: 'series',",
      "  },",
      "};",
      "",
      "//--- Defines the display options for the chart",
      "chartoptions_Bar = {",
      "  legend: {},",
      "  grid: {",
      "    left: '1%',",
      "    right: '2%',",
      "    bottom: '1%',",
      "    containLabel: true,",
      "  },",
      "  toolbox: {",
      "    feature: {",
      "      saveAsImage: {",
      "        name: 'MyBarChart',",
      "      },",
      "    },",
      "  },",
      "  color: [",
      "    'rgba(0,255,0,0.5)', //--- Green",
      "    'rgba(255,255,0,0.5)', //--- Yellow",
      "    'rgba(255,0,0,0.5)', //---Red",
      "  ],",
      "  dataset: {",
      "    //--- References fields in TriageI source object",
      "    dimensions: ['Display', 'Green', 'Yellow', 'Red'],",
      "    source: [], //--- Array of data objects",
      "  },",
      "  //--- Declare X axis, which is a category axis, mapping to the first column of source by default",
      "  xAxis: { type: 'category' },",
      "  yAxis: {},",
      "  //--- Declare several series, each of them mapped to a column of the dataset by default",
      "  series: [",
      "    this.seriesSpecificOptions_bar,",
      "    this.seriesSpecificOptions_bar,",
      "    this.seriesSpecificOptions_bar,",
      "  ],",
      "};",
      "",
      "//--- Update method",
      "private updateChart_Bar() {",
      "  this.loading_Bar = true;",
      "",
      "  this.mergeOptions_Bar = {",
      "    dataset: {",
      "      source: [",
      "        {",
      "          Display: 'List 1',",
      "          Green: Math.round(Math.random() * 70 + 10),",
      "          Yellow: Math.round(Math.random() * 70 + 10),",
      "          Red: Math.round(Math.random() * 70 + 10),",
      "        },",
      "        {",
      "          Display: 'List 2',",
      "          Green: Math.round(Math.random() * 70 + 10),",
      "          Yellow: Math.round(Math.random() * 70 + 10),",
      "          Red: Math.round(Math.random() * 70 + 10),",
      "        },",
      "      ],",
      "    },",
      "  };",
      "",
      "  this.loading_Bar = false;",
      "}",
      "// ================================================================",
      "// ================================================================"
    ],
    "description": "jchart Bar"
  },
  //=================================================================
  "jchart Line": {
    "prefix": "jchart",
    "body": [
      "// ================================================================",
      "// ========== Line ================================================",
      "// ================================================================",
      "//--- Add to HTML",
      "// <div echarts [options]=\"chartoptions_Line\" [merge]=\"mergeOptions_Line\" class=\"chart\"></div>",
      "",
      "mergeOptions_Line: any; //--- Object used to dynamically update chart options",
      "loading_Line: boolean = false; //--- Display loading graphic on chart",
      "",
      "//--- Add specific settings to series options",
      "private seriesSpecificOptions_Line = {",
      "  type: 'line',",
      "  areaStyle: {},",
      "  smooth: 0.5,",
      "};",
      "",
      "//--- Defines the display options for the chart",
      "chartoptions_Line = {",
      "  tooltip: {",
      "    trigger: 'axis',",
      "  },",
      "  color: [",
      "    'rgba(0,255,0,0.5)', //--- Green",
      "    'rgba(255,0,0,0.5)', //---Red",
      "  ],",
      "  legend: {",
      "    data: ['Current Year', 'Previous Year'],",
      "  },",
      "  grid: {",
      "    left: '2%',",
      "    right: '3%',",
      "    bottom: '2%',",
      "    containLabel: true,",
      "  },",
      "  toolbox: {",
      "    feature: {",
      "      saveAsImage: {",
      "        name: 'MyLineChart',",
      "      },",
      "    },",
      "  },",
      "  xAxis: {",
      "    type: 'category',",
      "    boundaryGap: false,",
      "  },",
      "  yAxis: {",
      "    type: 'value',",
      "  },",
      "  dataset: {",
      "    dimensions: ['axis', 'Line1', 'Line2'],",
      "    source: {",
      "      axis: [],",
      "    },",
      "  },",
      "  series: [this.seriesSpecificOptions_Line, this.seriesSpecificOptions_Line],",
      "};",
      "",
      "//--- Update method",
      "private updateChart_Line() {",
      "  this.loading_Line = true;",
      "",
      "  this.mergeOptions_Line = {",
      "    dataset: {",
      "      source: {",
      "        axis: ['D1', 'D2', 'D3', 'D4'],",
      "        Line1: [",
      "          Math.round(Math.random() * 50 + 10),",
      "          Math.round(Math.random() * 70 + 10),",
      "          Math.round(Math.random() * 70 + 10),",
      "          Math.round(Math.random() * 70 + 10),",
      "        ],",
      "        Line2: [",
      "          Math.round(Math.random() * 50 + 10),",
      "          Math.round(Math.random() * 70 + 10),",
      "          Math.round(Math.random() * 70 + 10),",
      "          Math.round(Math.random() * 70 + 10),",
      "        ],",
      "      },",
      "    },",
      "  };",
      "",
      "  this.loading_Line = false;",
      "}",
      "// ================================================================",
      "// ================================================================"
    ],
    "description": "jchart Line"
  },
  //=================================================================
  "jchart Pie": {
    "prefix": "jchart",
    "body": [
      "// ================================================================",
      "// ========== Pie =================================================",
      "// ================================================================",
      "//--- Add to HTML",
      "// <div echarts [options]=\"chartoptions_Line\" [merge]=\"mergeOptions_Line\" class=\"chart\"></div>",
      "",
      "mergeOptions_Pie: any; //--- Object used to dynamically update chart options",
      "loading_Pie: boolean = false; //--- Display loading graphic on chart",
      "",
      "//--- Defines the display options for the chart",
      "chartoptions_Pie = {",
      "  legend: {",
      "    orient: 'vertical',",
      "    left: 'left',",
      "  },",
      "  color: [",
      "    'rgba(0,255,0,0.3)', //--- Green",
      "    'rgba(255,0,0,0.3)', //--- Red",
      "  ],",
      "  series: [",
      "    {",
      "      type: 'pie',",
      "      radius: '80%',",
      "      data: [],",
      "      label: {",
      "        show: true,",
      "        position: 'inside',",
      "        formatter: '{d} %',",
      "        fontSize: 14,",
      "        color: 'rgba(15, 73, 115, 0.85)',",
      "      },",
      "      clockwise: false,",
      "      itemStyle: {",
      "        borderRadius: 10,",
      "        borderColor: '#fff',",
      "        borderWidth: 5,",
      "      },",
      "    },",
      "  ],",
      "};",
      "",
      "//--- Update method",
      "private updateChart_Pie() {",
      "  this.loading_Line = true;",
      "",
      "  this.mergeOptions_Pie = {",
      "    series: {",
      "      data: [",
      "        { name: 'P1', value: Math.round(Math.random() * 9 + 1) },",
      "        { name: 'P2', value: Math.round(Math.random() * 9 + 1) },",
      "      ],",
      "    },",
      "  };",
      "",
      "  this.loading_Line = false;",
      "}",
      "// ================================================================",
      "// ================================================================"
    ],
    "description": "jchart Pie"
  },
  //=================================================================
}
